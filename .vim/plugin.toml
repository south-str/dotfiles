# [plugin.toml]

## マネージャおよびプラグイン開発用の汎用プラグイン
[[plugins]]
# プラグインマネージャ
repo = 'Shougo/dein.vim'

[[plugins]]
# 非同期実行ライブラリ
repo = 'Shougo/vimproc.vim'
build = 'make'

[[plugins]]
# VimからDeno(JS/TS実行環境)を利用するためのプラグイン
repo = 'vim-denops/denops.vim'

[[plugins]]
# リモートプラグインフレームワーク(vim-hug-neovim-rpcと同時に必要かもしれない)
repo = 'roxma/nvim-yarp'
if = '''!has('nvim')'''

[[plugins]]
# neovim互換性レイヤー(nvim-yarpと同時に必要かもしれない)
repo = 'roxma/vim-hug-neovim-rpc'
if = '''!has('nvim')'''

## ファジーファインダー
[[plugins]]
# ファジーファインダー(要vim-denops/denops.vim)
repo = 'Shougo/ddu.vim'
hook_add = '''
  " default settings
  call ddu#custom#patch_global({
  \ 'ui': 'ff',
  \ 'sources': [{'name': 'file_rec', 'params': {}}],
  \ 'sourceOptions': {
  \   '_': {
  \     'matchers': ['matcher_substring'],
  \   },
  \ },
  \ 'kindOptions': {
  \   'file': {
  \     'defaultAction': 'open',
  \   },
  \ }
  \ })
'''

[[plugins]]
# UI
# キーマッピングの設定は基本的なもののみ行った(see https://zenn.dev/shougo/articles/ddu-vim-beta)
repo = 'Shougo/ddu-ui-ff'
hook_add = '''
  " key mapping
  autocmd FileType ddu-ff call s:ddu_my_settings()
  function! s:ddu_my_settings() abort
    nnoremap <buffer><silent> <CR>
      \ <Cmd>call ddu#ui#ff#do_action('itemAction')<CR>
    nnoremap <buffer><silent> <Space>
      \ <Cmd>call ddu#ui#ff#do_action('toggleSelectItem')<CR>
    nnoremap <buffer><silent> i
      \ <Cmd>call ddu#ui#ff#do_action('openFilterWindow')<CR>
    nnoremap <buffer><silent> q
      \ <Cmd>call ddu#ui#ff#do_action('quit')<CR>
  endfunction

  autocmd FileType ddu-ff-filter call s:ddu_filter_my_settings()
  function! s:ddu_filter_my_settings() abort
    inoremap <buffer><silent> <CR>
      \ <Esc><Cmd>close<CR>
    nnoremap <buffer><silent> <CR>
      \ <Cmd>close<CR>
    nnoremap <buffer><silent> q
      \ <Cmd>close<CR>
  endfunction

  " define ddu command
  command! DduStart :call ddu#start({})
'''

[[plugins]]
# ファイル/パス収集(要Shougo/ddu-kind-file)
repo = 'Shougo/ddu-source-file_rec'

[[plugins]]
# フィルタ
repo = 'Shougo/ddu-filter-matcher_substring'

[[plugins]]
# kind
repo = 'Shougo/ddu-kind-file'

## シンタックスハイライト
## できる限りLSP(Language Server Protocol)に置き換えたい
[[plugins]]
# LSP(Language Server Protocol)プラグイン
repo = 'prabirshrestha/vim-lsp'

[[plugins]]
# vim-lspのLSPインストール/設定を簡便にするプラグイン
# インストールしたいファイルタイプのファイルを開いて:LspInstallServerを実行するとLSPをインストールできる
repo = 'mattn/vim-lsp-settings'
hook_add = '''
  " virtual textの表示を無効化
  let g:lsp_diagnostics_virtual_text_enabled = 0
  " intelephense = PHPのLSP
  let g:lsp_settings = {
  \   'intelephense': {
  \     'workspace_config': {
  \       'intelephense': {
  \         'completion': {
  \           'fullyQualifyGlobalConstantsAndFunctions': v:true,
  \         },
  \         'phpdoc': {
  \           'useFullyQualifiedNames': v:true,
  \         },
  \         'hover': v:true,
  \         'validate': v:true,
  \       }
  \     }
  \   }
  \ }
'''

[[plugins]]
# Twigシンタックスハイライト
repo = 'nelsyeung/twig.vim'

## 補完(completion)
[[plugins]]
# 補完プラグインフレームワーク
repo = 'Shougo/ddc.vim'
hook_add = '''
  call ddc#custom#patch_global('sources', ['vim-lsp', 'around', 'file'])
  call ddc#custom#patch_global('sourceOptions', {
    \ '_': {
    \   'matchers': ['matcher_head'],
    \   'sorters': ['sorter_rank'],
    \ },
    \ 'around': {
    \   'mark': 'around',
    \ },
    \ 'file': {
    \   'mark': 'file',
    \   'isVolatile': v:true,
    \   'forceCompletionPattern': '\S/\S*',
    \ },
    \ 'vim-lsp': {
    \   'matchers': ['matcher_head'],
    \   'mark': 'LSP',
    \ }})
  call ddc#custom#patch_global('ui', 'native')
  call ddc#custom#patch_filetype(
    \ ['ps1', 'dosbatch', 'autohotkey', 'registry'], {
    \   'sourceOptions': {
    \     'file': {
    \       'forceCompletionPattern': '\S\\\S*',
    \     },
    \   },
    \   'sourceParams': {
    \     'file': {
    \       'mode': 'win32',
    \     },
    \   }})
  call ddc#enable()
'''

[[plugins]]
# ddcのsource
# カーソルの周囲、つまり現在のバッファ内の候補を収集する
repo = 'Shougo/ddc-around'

[[plugins]]
# ddcのsource
# ファイル名補完
repo = 'LumaKernel/ddc-file'

[[plugins]]
# ddcのsource
# LSP
repo = 'shun/ddc-vim-lsp'

[[plugins]]
# ddcのfilter
# 見出し一致確認(入力の絞り込み)
repo = 'Shougo/ddc-matcher_head'

[[plugins]]
# ddcのfilter
# 候補のソートを行う
repo = 'Shougo/ddc-sorter_rank'

[[plugins]]
# ddcのUI
repo = 'Shougo/ddc-ui-native'
on_source = 'ddc.vim'

[[plugins]]
# OMNI補完スクリプトセットアッププラグイン
# 以下を.vimrcに追加すると言語固有のOMNIスクリプトがまだない全てのファイルタイプに対してSyntaxCompleteがセットアップされる
repo = 'vim-scripts/SyntaxComplete'
hook_add = '''
  if has("autocmd") && exists("+omnifunc")
    autocmd Filetype *
          \ if &omnifunc == "" |
          \ setlocal omnifunc=syntaxcomplete#Complete |
          \ endif
  endif
'''

## カラースキーム
[[plugins]]
# Solarizedカラースキーム
repo = 'altercation/vim-colors-solarized'
hook_add = '''
  set background=dark
  call togglebg#map("<F5>")
  augroup setSolarized
    autocmd!
    autocmd setSolarized VimEnter * ++nested colorscheme solarized
  augroup END
  colorscheme solarized
'''

## その他プラグイン
[[plugins]]
# VIMヘルプの日本語訳
repo = 'vim-jp/vimdoc-ja'

[[plugins]]
# 編集中のコード即時実行環境
repo = 'thinca/vim-quickrun'
hook_add = '''
  let g:quickrun_config = {
    \ "_" : {
      \ "outputter/buffer/opener" : ":botright 8sp",
      \ "outputter/buffer/close_on_empty" : 1,
      \ "runner" : "vimproc",
      \ "runner/vimproc/updatetime" : 60
    \ },
  \ }
  nnoremap <expr><silent> <C-c> quickrun#is_running() ? quickrun#sweep_sessions() : "\<C-c>"
'''

[[plugins]]
# LISPのSWANKサーバ起動および通信を行うLISPインタラクション開発環境
repo = 'kovisoft/slimv'
hook_add = '''
  " SWANKサーバを起動するためのコマンド
  " let g:slimv_swank_cmd = '!osascript -e "tell application \"Terminal\" to do script \"ccl64 --load ~/.cache/dein/repos/github.com/kovisoft/slimv/slime/start-swank.lisp\""'
  let g:slimv_swank_cmd = '!osascript -e "tell application \"Terminal\" to do script \"ros -s swank -e \\\"(swank:create-server :port 4005 :dont-close t)\\\" wait\""'
'''

[[plugins]]
# Markdownリアルタイム外部プレビュー
repo = 'previm/previm'
hook_add = '''
  " :PrevimOpenで実行されるコマンド
  let g:previm_open_cmd = 'open -a Safari'
  " プレビューヘッダ非表示
  let g:previm_show_header = 0
'''
